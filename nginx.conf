
# ============================================================================
# SERVER CONFIGURATION
# ============================================================================
server {
    # Server listening configuration
    listen 80;
    listen [::]:80;

    # Server name (change this to your actual domain in production)
    server_name localhost;

    # Connection limiting per IP (disabled for Docker compatibility)
    # limit_conn conn_limit_per_ip 10;

    # Optional: SSL configuration (uncomment for HTTPS)
    # listen 443 ssl http2;
    # ssl_certificate /etc/nginx/ssl/cert.pem;
    # ssl_certificate_key /etc/nginx/ssl/key.pem;
    # Root directory for static files (Vue.js build output)
    root /usr/share/nginx/html;

    # Default index file
    index index.html;

    # Custom server tokens (hide nginx version)
    server_tokens off;

    # Health check endpoint for load balancers and monitoring
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Enhanced logging
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # ============================================================================
    # SINGLE PAGE APPLICATION (SPA) ROUTING
    # ============================================================================
    # Handle Vue.js client-side routing
    location / {
        # CORS headers for cross-origin widget loading
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Handle static assets
    location /assets/ {
        alias /usr/share/nginx/html/assets/;
        expires 1y;
        add_header Cache-Control "public, no-transform";
    }

    # Optional: Add cache control for HTML files
    # location ~* \.html$ {
    #     expires 1h;
    #     add_header Cache-Control "no-cache";
    # }

    # ============================================================================
    # API PROXY CONFIGURATION - DISABLED
    # ============================================================================
    # API proxy has been disabled - frontend will connect directly to backend
    # To re-enable, uncomment the location block below

    # location /api/v1 {
    #     # =============================================================================
    #     # Backend in Docker container - Enhanced Configuration
    #     # =============================================================================
    #     proxy_pass http://172.19.0.2:9000/api/v1;
    #
    #     # CORS headers for API proxy - Allow cross-origin requests from geo.co.id
    #     add_header 'Access-Control-Allow-Origin' '*' always;
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
    #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    #     add_header 'Access-Control-Allow-Credentials' 'true' always;
    #
    #     # Handle preflight requests
    #     if ($request_method = 'OPTIONS') {
    #         add_header 'Access-Control-Allow-Origin' '*';
    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
    #         add_header 'Access-Control-Allow-Credentials' 'true';
    #         add_header 'Access-Control-Max-Age' 1728000;
    #         add_header 'Content-Type' 'text/plain charset=UTF-8';
    #         add_header 'Content-Length' 0;
    #         return 204;
    #     }
    #
    #     # Alternative proxy configurations (commented out):
    #     # =============================================================================
    #     # Option 1: Backend running on host machine (for development)
    #     # proxy_pass http://host.docker.internal:9000/api/v1;
    #     #
    #     # Option 2: External API endpoint
    #     # proxy_pass https://api.bnpb.example.com/api/v1;
    #     #
    #     # Option 3: Different API version
    #     # proxy_pass http://bnpb_backend:9000/api/v2;
    #     #
    #     # Option 4: Multiple backend services
    #     # For /api/v1 routes:
    #     # proxy_pass http://backend-v1:9000/api/v1;
    #     # For /api/v2 routes:
    #     # location /api/v2 {
    #     #         proxy_pass http://backend-v2:9001/api/v2;
    #     # }
    #
    #     # HTTP version for upstream connection
    #     proxy_http_version 1.1;
    #
    #     # WebSocket proxy support (for real-time features)
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection 'upgrade';
    #
    #     # Standard proxy headers
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     proxy_set_header X-Forwarded-Host $server_name;
    #
    #     # Disable proxy buffering for real-time responses
    #     proxy_cache_bypass $http_upgrade;
    #
    #     # Timeout settings (adjust based on your API response times)
    #     proxy_connect_timeout 60s;
    #     proxy_send_timeout 60s;
    #     proxy_read_timeout 60s;
    #
    #     # Retry failed requests to handle temporary network issues
    #     proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    #     proxy_next_upstream_tries 3;
    #     proxy_next_upstream_timeout 30s;
    #
    #     # Buffer settings for better performance
    #     proxy_buffering on;
    #     proxy_buffer_size 4k;
    #     proxy_buffers 8 4k;
    #     proxy_busy_buffers_size 8k;
    #     proxy_request_buffering on;
    #
    #     # Enable logging for debugging
    #     access_log /var/log/nginx/api_access.log;
    #     error_log /var/log/nginx/api_error.log;
    # }

    # ============================================================================
    # STATIC ASSETS CACHING
    # ============================================================================
    # Cache static assets for better performance
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Cache for 1 minute for development (change to "1y" in production)
        expires 1m;

        # Cache control headers (no-cache untuk development, gunakan "public, immutable" untuk production)
        add_header Cache-Control "public, max-age=60, must-revalidate";

        # CORS headers for cross-origin asset access
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

        # Fallback for missing assets
        try_files $uri @fallback;

        # Optional: Add more asset types
        # location ~* \.(webp|avif|mp4|webm|ogg)$ {
        #     expires 1y;
        #     add_header Cache-Control "public, immutable";
        # }
    }

    # =============================================================================
    # Security Headers
    # =============================================================================
    # Security headers to protect against common vulnerabilities
    # Note: HSTS header removed as this is HTTP-only (port 80)
    # Add HSTS header when configuring HTTPS (port 443)
    # X-Frame-Options disabled to allow iframe embedding for chat widget
    # add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

    # Optional: Additional security headers
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'" always;
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # ============================================================================
    # COMPRESSION (SERVER-LEVEL)
    # ============================================================================
    # Enable gzip compression for this server
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Optional: More aggressive compression settings
    # gzip_min_length 256;
    # gzip_comp_level 9;

    # =============================================================================
    # Additional Security Locations
    # =============================================================================
    # Block access to hidden files and directories
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block access to backup files
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block access to common sensitive files
    location ~* \.(env|log|sql|bak|backup)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # ============================================================================
    # ERROR HANDLING
    # ============================================================================
    # Custom error pages for better user experience
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;

    # Custom 50x error page location
    location = /50x.html {
        root /usr/share/nginx/html;

        # Optional: Internal directive for better performance
        # internal;
    }

    # ============================================================================
    # OPTIONAL: RATE LIMITING
    # ============================================================================
    # Uncomment to enable rate limiting (requires limit_req_zone in http block)
    # limit_req zone=chat burst=10 nodelay;
    # limit_req_status 429;

    # ============================================================================
    # OPTIONAL: WEBSOCKET SUPPORT
    # ============================================================================
    # Uncomment if you need WebSocket proxy for real-time chat
    # location /ws/ {
    #     proxy_pass http://backend:8000;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     proxy_read_timeout 86400;
    # }
    # ============================================================================
    # OPTIONAL: FILE UPLOAD SUPPORT
    # ============================================================================
    # Uncomment if you need file upload support
    # location /upload/ {
    #     proxy_pass http://backend:8000/upload/;
    #     client_max_body_size 50M;
    #     proxy_request_buffering off;
    #     proxy_read_timeout 300s;
    # }
}
